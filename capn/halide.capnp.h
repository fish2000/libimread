// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: halide.capnp

#ifndef CAPNP_INCLUDED_b6c5a11aca2271f3_
#define CAPNP_INCLUDED_b6c5a11aca2271f3_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ca45c17d4410c859);
CAPNP_DECLARE_SCHEMA(8f5242a794523966);
CAPNP_DECLARE_SCHEMA(ce4cc358c34c34f8);
CAPNP_DECLARE_SCHEMA(820ea49e6faac8c1);
CAPNP_DECLARE_SCHEMA(94a74bab11c9fa83);
enum class TypeCode_94a74bab11c9fa83: uint16_t {
  HALIDE_TYPE_INT,
  HALIDE_TYPE_U_INT,
  HALIDE_TYPE_FLOAT,
  HALIDE_TYPE_HANDLE,
};
CAPNP_DECLARE_ENUM(TypeCode, 94a74bab11c9fa83);

}  // namespace schemas
}  // namespace capnp

namespace halide {

struct TypedBuffer {
  TypedBuffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca45c17d4410c859, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct BufferT {
  BufferT() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f5242a794523966, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Buffer {
  Buffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce4cc358c34c34f8, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DimList {
  DimList() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(820ea49e6faac8c1, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::TypeCode_94a74bab11c9fa83 TypeCode;

// =======================================================================================

class TypedBuffer::Reader {
public:
  typedef TypedBuffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasBuffer() const;
  inline  ::halide::Buffer::Reader getBuffer() const;

  inline  ::halide::TypeCode getType() const;

  inline  ::uint8_t getNdims() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TypedBuffer::Builder {
public:
  typedef TypedBuffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBuffer();
  inline  ::halide::Buffer::Builder getBuffer();
  inline void setBuffer( ::halide::Buffer::Reader value);
  inline  ::halide::Buffer::Builder initBuffer();
  inline void adoptBuffer(::capnp::Orphan< ::halide::Buffer>&& value);
  inline ::capnp::Orphan< ::halide::Buffer> disownBuffer();

  inline  ::halide::TypeCode getType();
  inline void setType( ::halide::TypeCode value);

  inline  ::uint8_t getNdims();
  inline void setNdims( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TypedBuffer::Pipeline {
public:
  typedef TypedBuffer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::halide::Buffer::Pipeline getBuffer();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BufferT::Reader {
public:
  typedef BufferT Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getDev() const;

  inline bool hasHost() const;
  inline  ::capnp::Data::Reader getHost() const;

  inline bool hasExtent() const;
  inline  ::capnp::List< ::int32_t>::Reader getExtent() const;

  inline bool hasStride() const;
  inline  ::capnp::List< ::int32_t>::Reader getStride() const;

  inline bool hasMin() const;
  inline  ::capnp::List< ::int32_t>::Reader getMin() const;

  inline  ::int32_t getElemSize() const;

  inline bool getHostDirty() const;

  inline bool getDevDirty() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BufferT::Builder {
public:
  typedef BufferT Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getDev();
  inline void setDev( ::uint64_t value);

  inline bool hasHost();
  inline  ::capnp::Data::Builder getHost();
  inline void setHost( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initHost(unsigned int size);
  inline void adoptHost(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownHost();

  inline bool hasExtent();
  inline  ::capnp::List< ::int32_t>::Builder getExtent();
  inline void setExtent( ::capnp::List< ::int32_t>::Reader value);
  inline void setExtent(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initExtent(unsigned int size);
  inline void adoptExtent(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownExtent();

  inline bool hasStride();
  inline  ::capnp::List< ::int32_t>::Builder getStride();
  inline void setStride( ::capnp::List< ::int32_t>::Reader value);
  inline void setStride(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initStride(unsigned int size);
  inline void adoptStride(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownStride();

  inline bool hasMin();
  inline  ::capnp::List< ::int32_t>::Builder getMin();
  inline void setMin( ::capnp::List< ::int32_t>::Reader value);
  inline void setMin(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initMin(unsigned int size);
  inline void adoptMin(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownMin();

  inline  ::int32_t getElemSize();
  inline void setElemSize( ::int32_t value);

  inline bool getHostDirty();
  inline void setHostDirty(bool value);

  inline bool getDevDirty();
  inline void setDevDirty(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BufferT::Pipeline {
public:
  typedef BufferT Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Buffer::Reader {
public:
  typedef Buffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasHost() const;
  inline  ::capnp::Data::Reader getHost() const;

  inline  ::uint64_t getDev() const;

  inline bool hasExtent() const;
  inline  ::halide::DimList::Reader getExtent() const;

  inline bool hasStride() const;
  inline  ::halide::DimList::Reader getStride() const;

  inline bool hasMin() const;
  inline  ::halide::DimList::Reader getMin() const;

  inline  ::int32_t getElemSize() const;

  inline bool getHostDirty() const;

  inline bool getDevDirty() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Buffer::Builder {
public:
  typedef Buffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHost();
  inline  ::capnp::Data::Builder getHost();
  inline void setHost( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initHost(unsigned int size);
  inline void adoptHost(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownHost();

  inline  ::uint64_t getDev();
  inline void setDev( ::uint64_t value);

  inline bool hasExtent();
  inline  ::halide::DimList::Builder getExtent();
  inline void setExtent( ::halide::DimList::Reader value);
  inline  ::halide::DimList::Builder initExtent();
  inline void adoptExtent(::capnp::Orphan< ::halide::DimList>&& value);
  inline ::capnp::Orphan< ::halide::DimList> disownExtent();

  inline bool hasStride();
  inline  ::halide::DimList::Builder getStride();
  inline void setStride( ::halide::DimList::Reader value);
  inline  ::halide::DimList::Builder initStride();
  inline void adoptStride(::capnp::Orphan< ::halide::DimList>&& value);
  inline ::capnp::Orphan< ::halide::DimList> disownStride();

  inline bool hasMin();
  inline  ::halide::DimList::Builder getMin();
  inline void setMin( ::halide::DimList::Reader value);
  inline  ::halide::DimList::Builder initMin();
  inline void adoptMin(::capnp::Orphan< ::halide::DimList>&& value);
  inline ::capnp::Orphan< ::halide::DimList> disownMin();

  inline  ::int32_t getElemSize();
  inline void setElemSize( ::int32_t value);

  inline bool getHostDirty();
  inline void setHostDirty(bool value);

  inline bool getDevDirty();
  inline void setDevDirty(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Buffer::Pipeline {
public:
  typedef Buffer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::halide::DimList::Pipeline getExtent();
  inline  ::halide::DimList::Pipeline getStride();
  inline  ::halide::DimList::Pipeline getMin();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DimList::Reader {
public:
  typedef DimList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getX() const;

  inline  ::int32_t getY() const;

  inline  ::int32_t getP() const;

  inline  ::int32_t getV() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DimList::Builder {
public:
  typedef DimList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getX();
  inline void setX( ::int32_t value);

  inline  ::int32_t getY();
  inline void setY( ::int32_t value);

  inline  ::int32_t getP();
  inline void setP( ::int32_t value);

  inline  ::int32_t getV();
  inline void setV( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DimList::Pipeline {
public:
  typedef DimList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool TypedBuffer::Reader::hasBuffer() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool TypedBuffer::Builder::hasBuffer() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::halide::Buffer::Reader TypedBuffer::Reader::getBuffer() const {
  return ::capnp::_::PointerHelpers< ::halide::Buffer>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::halide::Buffer::Builder TypedBuffer::Builder::getBuffer() {
  return ::capnp::_::PointerHelpers< ::halide::Buffer>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::halide::Buffer::Pipeline TypedBuffer::Pipeline::getBuffer() {
  return  ::halide::Buffer::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TypedBuffer::Builder::setBuffer( ::halide::Buffer::Reader value) {
  ::capnp::_::PointerHelpers< ::halide::Buffer>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::halide::Buffer::Builder TypedBuffer::Builder::initBuffer() {
  return ::capnp::_::PointerHelpers< ::halide::Buffer>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void TypedBuffer::Builder::adoptBuffer(
    ::capnp::Orphan< ::halide::Buffer>&& value) {
  ::capnp::_::PointerHelpers< ::halide::Buffer>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::halide::Buffer> TypedBuffer::Builder::disownBuffer() {
  return ::capnp::_::PointerHelpers< ::halide::Buffer>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::halide::TypeCode TypedBuffer::Reader::getType() const {
  return _reader.getDataField< ::halide::TypeCode>(
      0 * ::capnp::ELEMENTS, 1u);
}

inline  ::halide::TypeCode TypedBuffer::Builder::getType() {
  return _builder.getDataField< ::halide::TypeCode>(
      0 * ::capnp::ELEMENTS, 1u);
}
inline void TypedBuffer::Builder::setType( ::halide::TypeCode value) {
  _builder.setDataField< ::halide::TypeCode>(
      0 * ::capnp::ELEMENTS, value, 1u);
}

inline  ::uint8_t TypedBuffer::Reader::getNdims() const {
  return _reader.getDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS, 3u);
}

inline  ::uint8_t TypedBuffer::Builder::getNdims() {
  return _builder.getDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS, 3u);
}
inline void TypedBuffer::Builder::setNdims( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS, value, 3u);
}

inline  ::uint64_t BufferT::Reader::getDev() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t BufferT::Builder::getDev() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void BufferT::Builder::setDev( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool BufferT::Reader::hasHost() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool BufferT::Builder::hasHost() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader BufferT::Reader::getHost() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS),
        ::capnp::schemas::bp_8f5242a794523966 + 93, 1);
}
inline  ::capnp::Data::Builder BufferT::Builder::getHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS),
        ::capnp::schemas::bp_8f5242a794523966 + 93, 1);
}
inline void BufferT::Builder::setHost( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder BufferT::Builder::initHost(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void BufferT::Builder::adoptHost(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> BufferT::Builder::disownHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool BufferT::Reader::hasExtent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool BufferT::Builder::hasExtent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader BufferT::Reader::getExtent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS),
        ::capnp::schemas::bp_8f5242a794523966 + 105);
}
inline  ::capnp::List< ::int32_t>::Builder BufferT::Builder::getExtent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS),
        ::capnp::schemas::bp_8f5242a794523966 + 105);
}
inline void BufferT::Builder::setExtent( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void BufferT::Builder::setExtent(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder BufferT::Builder::initExtent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void BufferT::Builder::adoptExtent(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> BufferT::Builder::disownExtent() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool BufferT::Reader::hasStride() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool BufferT::Builder::hasStride() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader BufferT::Reader::getStride() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS),
        ::capnp::schemas::bp_8f5242a794523966 + 119);
}
inline  ::capnp::List< ::int32_t>::Builder BufferT::Builder::getStride() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS),
        ::capnp::schemas::bp_8f5242a794523966 + 119);
}
inline void BufferT::Builder::setStride( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void BufferT::Builder::setStride(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder BufferT::Builder::initStride(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void BufferT::Builder::adoptStride(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> BufferT::Builder::disownStride() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool BufferT::Reader::hasMin() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool BufferT::Builder::hasMin() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader BufferT::Reader::getMin() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS),
        ::capnp::schemas::bp_8f5242a794523966 + 133);
}
inline  ::capnp::List< ::int32_t>::Builder BufferT::Builder::getMin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS),
        ::capnp::schemas::bp_8f5242a794523966 + 133);
}
inline void BufferT::Builder::setMin( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void BufferT::Builder::setMin(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder BufferT::Builder::initMin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void BufferT::Builder::adoptMin(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> BufferT::Builder::disownMin() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::int32_t BufferT::Reader::getElemSize() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, 1);
}

inline  ::int32_t BufferT::Builder::getElemSize() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, 1);
}
inline void BufferT::Builder::setElemSize( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value, 1);
}

inline bool BufferT::Reader::getHostDirty() const {
  return _reader.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}

inline bool BufferT::Builder::getHostDirty() {
  return _builder.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}
inline void BufferT::Builder::setHostDirty(bool value) {
  _builder.setDataField<bool>(
      96 * ::capnp::ELEMENTS, value);
}

inline bool BufferT::Reader::getDevDirty() const {
  return _reader.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}

inline bool BufferT::Builder::getDevDirty() {
  return _builder.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}
inline void BufferT::Builder::setDevDirty(bool value) {
  _builder.setDataField<bool>(
      97 * ::capnp::ELEMENTS, value);
}

inline bool Buffer::Reader::hasHost() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Buffer::Builder::hasHost() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Buffer::Reader::getHost() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS),
        ::capnp::schemas::bp_ce4cc358c34c34f8 + 85, 1);
}
inline  ::capnp::Data::Builder Buffer::Builder::getHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS),
        ::capnp::schemas::bp_ce4cc358c34c34f8 + 85, 1);
}
inline void Buffer::Builder::setHost( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Buffer::Builder::initHost(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Buffer::Builder::adoptHost(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Buffer::Builder::disownHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t Buffer::Reader::getDev() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Buffer::Builder::getDev() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Buffer::Builder::setDev( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Buffer::Reader::hasExtent() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Buffer::Builder::hasExtent() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::halide::DimList::Reader Buffer::Reader::getExtent() const {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS),
        ::capnp::schemas::bp_ce4cc358c34c34f8 + 101);
}
inline  ::halide::DimList::Builder Buffer::Builder::getExtent() {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS),
        ::capnp::schemas::bp_ce4cc358c34c34f8 + 101);
}
#if !CAPNP_LITE
inline  ::halide::DimList::Pipeline Buffer::Pipeline::getExtent() {
  return  ::halide::DimList::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Buffer::Builder::setExtent( ::halide::DimList::Reader value) {
  ::capnp::_::PointerHelpers< ::halide::DimList>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::halide::DimList::Builder Buffer::Builder::initExtent() {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Buffer::Builder::adoptExtent(
    ::capnp::Orphan< ::halide::DimList>&& value) {
  ::capnp::_::PointerHelpers< ::halide::DimList>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::halide::DimList> Buffer::Builder::disownExtent() {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Buffer::Reader::hasStride() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Buffer::Builder::hasStride() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::halide::DimList::Reader Buffer::Reader::getStride() const {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS),
        ::capnp::schemas::bp_ce4cc358c34c34f8 + 111);
}
inline  ::halide::DimList::Builder Buffer::Builder::getStride() {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS),
        ::capnp::schemas::bp_ce4cc358c34c34f8 + 111);
}
#if !CAPNP_LITE
inline  ::halide::DimList::Pipeline Buffer::Pipeline::getStride() {
  return  ::halide::DimList::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Buffer::Builder::setStride( ::halide::DimList::Reader value) {
  ::capnp::_::PointerHelpers< ::halide::DimList>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::halide::DimList::Builder Buffer::Builder::initStride() {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Buffer::Builder::adoptStride(
    ::capnp::Orphan< ::halide::DimList>&& value) {
  ::capnp::_::PointerHelpers< ::halide::DimList>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::halide::DimList> Buffer::Builder::disownStride() {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Buffer::Reader::hasMin() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Buffer::Builder::hasMin() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::halide::DimList::Reader Buffer::Reader::getMin() const {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS),
        ::capnp::schemas::bp_ce4cc358c34c34f8 + 121);
}
inline  ::halide::DimList::Builder Buffer::Builder::getMin() {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS),
        ::capnp::schemas::bp_ce4cc358c34c34f8 + 121);
}
#if !CAPNP_LITE
inline  ::halide::DimList::Pipeline Buffer::Pipeline::getMin() {
  return  ::halide::DimList::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Buffer::Builder::setMin( ::halide::DimList::Reader value) {
  ::capnp::_::PointerHelpers< ::halide::DimList>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::halide::DimList::Builder Buffer::Builder::initMin() {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Buffer::Builder::adoptMin(
    ::capnp::Orphan< ::halide::DimList>&& value) {
  ::capnp::_::PointerHelpers< ::halide::DimList>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::halide::DimList> Buffer::Builder::disownMin() {
  return ::capnp::_::PointerHelpers< ::halide::DimList>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::int32_t Buffer::Reader::getElemSize() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, 1);
}

inline  ::int32_t Buffer::Builder::getElemSize() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, 1);
}
inline void Buffer::Builder::setElemSize( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value, 1);
}

inline bool Buffer::Reader::getHostDirty() const {
  return _reader.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}

inline bool Buffer::Builder::getHostDirty() {
  return _builder.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}
inline void Buffer::Builder::setHostDirty(bool value) {
  _builder.setDataField<bool>(
      96 * ::capnp::ELEMENTS, value);
}

inline bool Buffer::Reader::getDevDirty() const {
  return _reader.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}

inline bool Buffer::Builder::getDevDirty() {
  return _builder.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}
inline void Buffer::Builder::setDevDirty(bool value) {
  _builder.setDataField<bool>(
      97 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DimList::Reader::getX() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t DimList::Builder::getX() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DimList::Builder::setX( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DimList::Reader::getY() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t DimList::Builder::getY() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void DimList::Builder::setY( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DimList::Reader::getP() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t DimList::Builder::getP() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void DimList::Builder::setP( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DimList::Reader::getV() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t DimList::Builder::getV() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void DimList::Builder::setV( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

}  // namespace

#endif  // CAPNP_INCLUDED_b6c5a11aca2271f3_
